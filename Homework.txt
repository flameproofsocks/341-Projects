

Name: Brady Ronayne
Userid: IQ98130

CMSC 341 Fall 2018 Homework 6


-------------------------------------------------------------------
Question A (15 points)
-------------------------------------------------------------------

[Adapted from problem R-9.8 in textbook]

Hash the values 94, 11, 39, 20, 16, 5, 12, 44, 13, 88 and 23 into
a hash table with 11 slots. Handle collisions by linear probing.
Use the hash function: h(i) = (3 * i + 5) % 11

Type in each key on the same line as the index of the slot
where it is eventually inserted.

YOUR ANSWER TO QUESTION A:
   0: 5
   1: 94
   2: 39
   3: 13
   4: 23
   5: 11
   6: 44
   7: 88
   8: 12
   9: 16
  10: 20


-------------------------------------------------------------------
Question B (20 points)
-------------------------------------------------------------------

[Adapted from problem R-9.10 in textbook]

Repeat Question A using double hashing instead of linear probing.
Use the secondary hash function h'(k) = 7 - (k % 7).

YOUR ANSWER TO QUESTION B:
   0: 13
   1: 94
   2: 88
   3: 5
   4: 23
   5: 11
   6: 44
   7: 39
   8: 12
   9: 16
  10: 20


-------------------------------------------------------------------
Question C  (35 points total)
-------------------------------------------------------------------

We want to support the operations Insert(), Find() and Max() for
a program that uses n Insert(), n Find() and 15 Max() operations.
These operations can be performed in any order. The Max() operation
simply reports the maximum valued stored in the data structure
at the time of the call.

1. (5 points) Suppose that we use a red-black tree to support this
program. What is the asymptotic worst case running time for
n Insert(), n Find() and 15 Max() operations?

   (a) O(n)
   (b) O(n log n)
   (c) O(n^2)
   (d) O(n^2 log n)
   (e) O(n^3)

Answer:  B


2. (5 points) BRIEFLY explain your choice above.

For a properly made red-black tree, the insert operation should be O(log(n))
The find would likely search down the tree (this is log time)
The Max is only done 15 times, and is thus constant.
Thus the total runtime would be:
O(log(n))*n + O(log(n))*n + 15log(n)
which simplifies to O(n*log(n))


3. (5 points) Suppose that we use a binary max heap to support this
program. What is the asymptotic worst case running time for
n Insert(), n Find() and 15 Max() operations?

   (a) O(n)
   (b) O(n log n)
   (c) O(n^2)
   (d) O(n^2 log n)
   (e) O(n^3)

Answer: C

4. (5 points) BRIEFLY explain your choice above.

Like a red-black tree the insert operation is log and the search is linear.
Additionally only doing 15 (constant) max operations will require constant time.
O(log(n)*n +  O(n)*n + 15log(n)
O(n^2)




5. (5 points) Suppose that we use a hash table with a "good"
hash function to support this program. What is the asymptotic
"average" running time for n Insert(), n Find() and 15 Max()
operations?

   (a) O(n)
   (b) O(n log n)
   (c) O(n^2)
   (d) O(n^2 log n)
   (e) O(n^3)

Answer: A

6. (5 points) BRIEFLY explain your choice above.

For a hash table the insert will be constant time O(1)
The max will be linear time (though this doesn't matter for 15 operations)
And the Find will also be constant as the "average" case is constant. O(1)
Thus the total run time =
O(1)*n O(1)*n O(15)*n
which simplifies to O(n)



7. (5 points) Which of these three data structures would you
pick to support n Insert(), n Find() and 15 Max() operations?
Briefly justify your answer.

I would pick a Red Black Tree, this is log time in both searching and inserting.
This is very important when many operations must be done.
It is less efficient than a maxheap for finding the max, however
for a max of 15 operations, this does not much matter.
